{
  "address": "0x678dFd77b60aeA0A16Be99859Ecb547d3a6f554E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_usdc",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "donor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Donated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ETHRecovered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newManager",
          "type": "address"
        }
      ],
      "name": "ManagerUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newVault",
          "type": "address"
        }
      ],
      "name": "MorphoVaultUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Released",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "newSBT",
          "type": "address"
        }
      ],
      "name": "SBTUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensRecovered",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SBT",
      "outputs": [
        {
          "internalType": "contract IDonationSBT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "donate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "donorTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllDonors",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDonorCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLivesChanged",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDonated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalDonors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "donor",
          "type": "address"
        }
      ],
      "name": "getVaultSummary",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalRaised",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "donorBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "vaultBalance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getYieldEarned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "yield",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hasDonated",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "morphoVault",
      "outputs": [
        {
          "internalType": "contract IMorphoVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverERC20",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "recoverETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "patient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "releaseToPatient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setMorphoVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_sbt",
          "type": "address"
        }
      ],
      "name": "setSBT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sweepUSDCToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDonated",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDonors",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalLivesChanged",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReleased",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xd229f3607f4ae0c125c80f1d536733a2d235e01f24b37d999b98ed8278df3de6",
  "receipt": {
    "to": null,
    "from": "0x63E59beb8D2844022362e2F744EEA62B9C84c65c",
    "contractAddress": "0x678dFd77b60aeA0A16Be99859Ecb547d3a6f554E",
    "transactionIndex": 17,
    "gasUsed": "1198666",
    "logsBloom": "0x
    "blockHash": "0x75ef2542030bf3042a95c8e35e6fe2a613d1254da218f8f97aa6cd1863bc0201",
    "transactionHash": "0xd229f3607f4ae0c125c80f1d536733a2d235e01f24b37d999b98ed8278df3de6",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 32607815,
        "transactionHash": "0xd229f3607f4ae0c125c80f1d536733a2d235e01f24b37d999b98ed8278df3de6",
        "address": "0x678dFd77b60aeA0A16Be99859Ecb547d3a6f554E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000063e59beb8d2844022362e2f744eea62b9c84c65c"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0x75ef2542030bf3042a95c8e35e6fe2a613d1254da218f8f97aa6cd1863bc0201"
      }
    ],
    "blockNumber": 32607815,
    "cumulativeGasUsed": "4124455",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x94d07C7Aa3F8910ACeF21300098DA9171d06220C"
  ],
  "numDeployments": 1,
  "solcInputHash": "3b45d1f6b408afa2443d278026f50e60",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_usdc\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Donated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ETHRecovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newManager\",\"type\":\"address\"}],\"name\":\"ManagerUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newVault\",\"type\":\"address\"}],\"name\":\"MorphoVaultUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Released\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newSBT\",\"type\":\"address\"}],\"name\":\"SBTUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRecovered\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SBT\",\"outputs\":[{\"internalType\":\"contract IDonationSBT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"donate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"donorTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllDonors\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDonorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLivesChanged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDonors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"donor\",\"type\":\"address\"}],\"name\":\"getVaultSummary\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalRaised\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"donorBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vaultBalance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getYieldEarned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"yield\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hasDonated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"morphoVault\",\"outputs\":[{\"internalType\":\"contract IMorphoVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"patient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"releaseToPatient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setMorphoVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_sbt\",\"type\":\"address\"}],\"name\":\"setSBT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sweepUSDCToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonated\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDonors\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalLivesChanged\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReleased\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DonationVault.sol\":\"DonationVault\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/DonationVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// Website: https://www.decentralbros.io\\n// Twitter / X: https://x.com/DecentralBros_\\n\\n//   ____       ____       ____        _____       ____       \\n// /\\\\  _`\\\\    /\\\\  _`\\\\    /\\\\  _`\\\\     /\\\\  __`\\\\    /\\\\  _`\\\\     \\n// \\\\ \\\\ \\\\/\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\   \\\\ \\\\ \\\\/\\\\ \\\\   \\\\ \\\\,\\\\L\\\\_\\\\   \\n//  \\\\ \\\\ \\\\ \\\\ \\\\  \\\\ \\\\  _ <'  \\\\ \\\\ ,  /    \\\\ \\\\ \\\\ \\\\ \\\\   \\\\/_\\\\__ \\\\   \\n//   \\\\ \\\\ \\\\_\\\\ \\\\  \\\\ \\\\ \\\\L\\\\ \\\\  \\\\ \\\\ \\\\\\\\ \\\\    \\\\ \\\\ \\\\_\\\\ \\\\    /\\\\ \\\\L\\\\ \\\\ \\n//    \\\\ \\\\____/   \\\\ \\\\____/   \\\\ \\\\_\\\\ \\\\_\\\\   \\\\ \\\\_____\\\\   \\\\ `\\\\____\\\\\\n//     \\\\/___/     \\\\/___/     \\\\/_/\\\\/ /    \\\\/_____/    \\\\/_____/\\n\\n// 01000100 01000010 01010010 01001111 01010011\\npragma solidity ^0.8.17;\\n\\n/**\\n * @title DonationVault\\n * @notice HopeChain Vault \\u2013 receives USDC donations, deposits into a Morpho yield vault,\\n *         mints a soulbound donor badge (SBT) once per donor,\\n *         and allows the manager to release funds directly to verified patients.\\n*/\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/* ---------------- Interfaces ---------------- */\\n\\ninterface IDonationSBT {\\n    function mintOrUpdateBadge(address donor, uint256 amount) external;\\n}\\n\\ninterface IMorphoVault {\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n    function withdraw(uint256 assets, address receiver, address owner) external returns (uint256 shares);\\n    function totalAssets() external view returns (uint256);\\n}\\n\\n/* ---------------- Contract ---------------- */\\n\\ncontract DonationVault is Ownable, ReentrancyGuard {\\n    IERC20 public immutable USDC;\\n    IDonationSBT public SBT;\\n    IMorphoVault public morphoVault;\\n\\n    address public manager;\\n\\n    uint256 public totalDonated;\\n    uint256 public totalDonors;\\n    uint256 public totalLivesChanged;\\n    uint256 public totalReleased;\\n\\n    mapping(address => uint256) public donorTotal;\\n    mapping(address => bool) public hasDonated;\\n    address[] private donorList;\\n\\n    /* ---------------- Events ---------------- */\\n    event Donated(address indexed donor, uint256 amount, uint256 timestamp);\\n    event Released(address indexed patient, uint256 amount);\\n    event ManagerUpdated(address indexed newManager);\\n    event MorphoVaultUpdated(address indexed newVault);\\n    event SBTUpdated(address indexed newSBT);\\n    event TokensRecovered(address indexed token, uint256 amount);\\n    event ETHRecovered(uint256 amount);\\n\\n    /* ---------------- Constructor ---------------- */\\n    constructor(address _usdc) {\\n        require(_usdc != address(0), \\\"Invalid USDC address\\\");\\n        USDC = IERC20(_usdc);\\n    }\\n\\n    /* ---------------- Modifiers ---------------- */\\n    modifier onlyManager() {\\n        require(msg.sender == manager, \\\"Not manager\\\");\\n        _;\\n    }\\n\\n    /* ---------------- Owner Config ---------------- */\\n\\n    function setManager(address _manager) external onlyOwner nonReentrant {\\n        require(_manager != address(0), \\\"Invalid manager\\\");\\n        manager = _manager;\\n        emit ManagerUpdated(_manager);\\n    }\\n\\n    function setSBT(address _sbt) external onlyOwner nonReentrant {\\n        require(_sbt != address(0), \\\"Invalid address\\\");\\n        SBT = IDonationSBT(_sbt);\\n        emit SBTUpdated(_sbt);\\n    }\\n\\n    function setMorphoVault(address _vault) external onlyOwner nonReentrant {\\n        require(_vault != address(0), \\\"Invalid address\\\");\\n        morphoVault = IMorphoVault(_vault);\\n        USDC.approve(_vault, type(uint256).max);\\n        emit MorphoVaultUpdated(_vault);\\n    }\\n\\n    /* ---------------- Donation Flow ---------------- */\\n\\n    function donate(uint256 amount) external nonReentrant {\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(address(morphoVault) != address(0), \\\"Morpho not set\\\");\\n\\n        USDC.transferFrom(msg.sender, address(this), amount);\\n        morphoVault.deposit(amount, address(this));\\n\\n        if (!hasDonated[msg.sender]) {\\n            hasDonated[msg.sender] = true;\\n            totalDonors += 1;\\n            donorList.push(msg.sender);\\n        }\\n\\n        donorTotal[msg.sender] += amount;\\n        totalDonated += amount;\\n\\n        emit Donated(msg.sender, amount, block.timestamp);\\n\\n        if (address(SBT) != address(0)) {\\n            SBT.mintOrUpdateBadge(msg.sender, amount);\\n        }\\n    }\\n\\n    /* ---------------- Manager Actions ---------------- */\\n\\n    function releaseToPatient(address patient, uint256 amount)\\n        external\\n        onlyManager\\n        nonReentrant\\n    {\\n        require(patient != address(0), \\\"Invalid patient\\\");\\n        require(amount > 0, \\\"Zero amount\\\");\\n        require(address(morphoVault) != address(0), \\\"Morpho not set\\\");\\n\\n        morphoVault.withdraw(amount, address(this), address(this));\\n        USDC.transfer(patient, amount);\\n\\n        totalLivesChanged += 1;\\n        totalReleased += amount;\\n\\n        emit Released(patient, amount);\\n    }\\n\\n    /* ---------------- Maintenance ---------------- */\\n\\n    function sweepUSDCToVault() external onlyOwner nonReentrant {\\n        uint256 balance = USDC.balanceOf(address(this));\\n        if (balance > 0 && address(morphoVault) != address(0)) {\\n            morphoVault.deposit(balance, address(this));\\n        }\\n    }\\n\\n    function recoverERC20(address tokenAddress, uint256 amount) external onlyOwner nonReentrant {\\n        require(tokenAddress != address(0), \\\"Invalid token\\\");\\n        IERC20(tokenAddress).transfer(owner(), amount);\\n        emit TokensRecovered(tokenAddress, amount);\\n    }\\n\\n    function recoverETH(uint256 amount) external onlyOwner nonReentrant {\\n        (bool success, ) = payable(owner()).call{value: amount}(\\\"\\\");\\n        require(success, \\\"ETH transfer failed\\\");\\n        emit ETHRecovered(amount);\\n    }\\n\\n    /* ---------------- View / Analytics ---------------- */\\n\\n    function getTotalDonated() external view returns (uint256) {\\n        return totalDonated;\\n    }\\n\\n    function getYieldEarned() external view returns (uint256 yield) {\\n        if (address(morphoVault) == address(0)) return 0;\\n        uint256 assets = morphoVault.totalAssets();\\n        if (assets <= totalDonated) return 0;\\n        yield = assets - totalDonated;\\n    }\\n\\n    function getTotalDonors() external view returns (uint256) {\\n        return totalDonors;\\n    }\\n\\n    function getLivesChanged() external view returns (uint256) {\\n        return totalLivesChanged;\\n    }\\n\\n    function getTotalReleased() external view returns (uint256) {\\n        return totalReleased;\\n    }\\n\\n    function getVaultSummary(address donor)\\n        external\\n        view\\n        returns (uint256 totalRaised, uint256 donorBalance, uint256 vaultBalance)\\n    {\\n        return (totalDonated, donorTotal[donor], currentVaultBalance());\\n    }\\n\\n    function currentVaultBalance() public view returns (uint256) {\\n        if (address(morphoVault) == address(0)) return 0;\\n        return morphoVault.totalAssets();\\n    }\\n\\n    function getAllDonors() external view returns (address[] memory) {\\n        return donorList;\\n    }\\n\\n    function getDonorCount() external view returns (uint256) {\\n        return donorList.length;\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xaba69ab22ebc4429d5ca8af6d8555acbc6b0b88306f75c7f3cc341c736ecb21b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a03461011457601f61150038819003918201601f19168301916001600160401b038311848410176101195780849260209460405283398101031261011457516001600160a01b0380821691829003610114576000543360018060a01b0319821617600055604051913391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a36001805581156100d257506080526040516113d0908161013082396080518181816102ac01528181610920015281816109df01528181610b850152610eee0152f35b62461bcd60e51b815260206004820152601460248201527f496e76616c6964205553444320616464726573730000000000000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe60806040818152600480361015610021575b505050361561001f57600080fd5b005b600092833560e01c908162b370441461108a5750806317294a111461104c57806325c302e41461053657806330aef20314610e1857806332e1e4d514610de057806334640dea14610d8f578063481c6a7514610d685780634b14c0ef14610555578063513f299814610b1d5780635169379c14610d3f57806369bc2f1e14610d20578063715018a614610cc657806371a4b1e314610ca95780638501de0114610c855780638724324d14610b3c57806387b5eb8b14610b1d5780638980f11f14610a0e57806389a30271146109ca5780638da5cb5b146109a25780638f9fe9c31461089f57806398e36b04146107da578063994b75481461075c578063a323a74814610733578063d0ebdbe714610688578063d333555314610593578063d56e306814610574578063e33b7de314610555578063e615a71214610536578063f14faf6f146102425763f2fde38b03610011573461023e57602036600319011261023e5761018c6110a6565b906101956110c1565b6001600160a01b039182169283156101ec575050600054826bffffffffffffffffffffffff60a01b821617600055167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a380f35b906020608492519162461bcd60e51b8352820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152fd5b8280fd5b50919034610532576020928360031936011261023e578035610262611119565b61026d8115156111fd565b6003546001600160a01b03906102869082161515611237565b83516323b872dd60e01b81523384820152306024820152604481018390528681606481897f000000000000000000000000000000000000000000000000000000000000000087165af180156104fb57610505575b506003548451636e553f6560e01b815284810184815230602082015290918891839185169082908a90829060400103925af180156104fb579087916104d2575b5050338552600a8652838520805460ff81161561041f575b505084953386526009815284862061034b848254611274565b905561035983600554611274565b60055584519083825242908201527f4928895ba6723e8e27b15f32e4c3054a1b6c7f8c03f133558d6fa42b3928d14c853392a260025416908161039f575b846001805580f35b813b1561041b578351633865d7cb60e11b81523384820190815260208101929092529491859182908490829060400103925af18015610411576103e5575b808493610397565b67ffffffffffffffff83116103fe5750523880806103dd565b634e487b7160e01b845260419052602483fd5b82513d86823e3d90fd5b8480fd5b60019060ff1916179055600654600181018091116104bf57600655600b5495680100000000000000008710156104ac576001870180600b55871015610499577f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990960180546001600160a01b031916331790558438610332565b634e487b7160e01b865260328452602486fd5b634e487b7160e01b865260418452602486fd5b634e487b7160e01b865260118452602486fd5b813d83116104f4575b6104e581836111ad565b8101031261041b57853861031a565b503d6104db565b85513d88823e3d90fd5b61052490873d891161052b575b61051c81836111ad565b8101906111e5565b50386102da565b503d610512565b5080fd5b5050346105325781600319360112610532576020906006549051908152f35b5050346105325781600319360112610532576020906008549051908152f35b5050346105325781600319360112610532576020906005549051908152f35b50903461023e57602036600319011261023e578135916105b16110c1565b6105b9611119565b838080808660018060a01b038254165af13d15610683573d67ffffffffffffffff8111610670578351906105f7601f8201601f1916602001836111ad565b81528560203d92013e5b1561063857507f0296f2c4dbc8c0e53c0ffab63f84aeebd5c28aa143475a37346bf15ac003f3279160209151908152a16001805580f35b6020606492519162461bcd60e51b83528201526013602482015272115512081d1c985b9cd9995c8819985a5b1959606a1b6044820152fd5b634e487b7160e01b865260418352602486fd5b610601565b503461023e57602036600319011261023e576106a26110a6565b6106aa6110c1565b6106b2611119565b6001600160a01b03169182156106fe575080546001600160a01b031916821790557f2c1c11af44aa5608f1dca38c00275c30ea091e02417d36e70e9a1538689c433d8280a26001805580f35b906020606492519162461bcd60e51b8352820152600f60248201526e24b73b30b634b21036b0b730b3b2b960891b6044820152fd5b50503461053257816003193601126105325760025490516001600160a01b039091168152602090f35b83346107d75760203660031901126107d7576107766110a6565b61077e6110c1565b610786611119565b6001600160a01b031661079a81151561116f565b600280546001600160a01b031916821790557f610b8422aaabfef697e1d7d588839ea0e67b0c0cf0a6dde0b4f1f780e10e56028280a26001805580f35b80fd5b8284346107d757806003193601126107d757908051918290600b549182855260208095018093600b84527f0175b7a638427703f0dbe7bb9bbf987a2551717b34e79f33b5b1008d1fa01db990845b818110610882575050508161083e9103826111ad565b83519485948186019282875251809352850193925b82811061086257505050500390f35b83516001600160a01b031685528695509381019392810192600101610853565b82546001600160a01b031684529288019260019283019201610828565b503461023e57602036600319011261023e5760449160206108be6110a6565b926108c76110c1565b6108cf611119565b6001600160a01b039384169485916108e883151561116f565b826bffffffffffffffffffffffff60a01b6003541617600355878551968794859363095ea7b360e01b855284015260001960248401527f0000000000000000000000000000000000000000000000000000000000000000165af1908115610999575061097b575b507fde6abfe1af01e5fdf2126f1b21ace40370d27c6289b5b19410366fd761f6f3a38280a26001805580f35b6109929060203d811161052b5761051c81836111ad565b503861094f565b513d85823e3d90fd5b505034610532578160031936011261053257905490516001600160a01b039091168152602090f35b505034610532578160031936011261053257517f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602090f35b503461023e578160031936011261023e57610a276110a6565b9160243591610a346110c1565b610a3c611119565b6001600160a01b03938416938415610aea578554835163a9059cbb60e01b815291166001600160a01b03169181019182526020808301859052909182908190604001038188885af18015610ae057917f46d2e6e71fc567877b817ff3d940571f989d4ee4d40f2b70806d36e738feef6f9391602093610ac3575b5051908152a26001805580f35b610ad990843d811161052b5761051c81836111ad565b5038610ab6565b82513d87823e3d90fd5b506020606492519162461bcd60e51b8352820152600d60248201526c24b73b30b634b2103a37b5b2b760991b6044820152fd5b5050346105325781600319360112610532576020906007549051908152f35b50903461023e578260031936011261023e57610b566110c1565b610b5e611119565b80516370a0823160e01b815230838201526020929091906001600160a01b039084846024817f000000000000000000000000000000000000000000000000000000000000000086165afa938415610c7b578694610c48575b5083151580610c3b575b610bcd575b856001805580f35b6003548351636e553f6560e01b8152918201948552306020860152909385928592169082908890829060400103925af19081156109995750610c12575b808080610bc5565b813d8311610c34575b610c2581836111ad565b810103126107d7573880610c0a565b503d610c1b565b5081600354161515610bc0565b9093508481813d8311610c74575b610c6081836111ad565b81010312610c7057519238610bb6565b8580fd5b503d610c56565b83513d88823e3d90fd5b505034610532578160031936011261053257602090610ca2611297565b9051908152f35b505034610532578160031936011261053257602090610ca2611331565b83346107d757806003193601126107d757610cdf6110c1565b80546001600160a01b03198116825581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b505034610532578160031936011261053257602090600b549051908152f35b50503461053257816003193601126105325760035490516001600160a01b039091168152602090f35b503461023e578260031936011261023e575490516001600160a01b03909116815260209150f35b505034610532576020366003190112610532579081606092610daf6110a6565b6005546001600160a01b039091168452600960205292205490610dd0611331565b9181519384526020840152820152f35b5050346105325760203660031901126105325760209181906001600160a01b03610e086110a6565b1681526009845220549051908152f35b50919034610532578060031936011261053257610e336110a6565b83546001600160a01b03926024359290918416330361101b57610e54611119565b838116938415610fe65790839291610e6e879515156111fd565b806003541691610e7f831515611237565b835192632d182be560e21b8452858a850152306024850152306044850152836064816020998a945af18015610fdc579185918793610fa7575b855163a9059cbb60e01b81526001600160a01b03909116818c0190815260208101939093529350839182908a90829060400103927f0000000000000000000000000000000000000000000000000000000000000000165af18015610f9d57610f80575b5060075460018101809111610f6d577fb21fb52d5749b80f3182f8c6992236b5e5576681880914484d7f4c9b062e619e94959650600755610f5e82600854611274565b60085551908152a26001805580f35b634e487b7160e01b865260118752602486fd5b610f9690843d861161052b5761051c81836111ad565b5038610f1b565b82513d88823e3d90fd5b928092509390933d8311610fd5575b610fc081836111ad565b81010312610fd15783828692610eb8565b8680fd5b503d610fb6565b84513d8a823e3d90fd5b825162461bcd60e51b8152602081890152600f60248201526e125b9d985b1a59081c185d1a595b9d608a1b6044820152606490fd5b815162461bcd60e51b8152602081880152600b60248201526a2737ba1036b0b730b3b2b960a91b6044820152606490fd5b5050346105325760203660031901126105325760209160ff9082906001600160a01b036110776110a6565b168152600a855220541690519015158152f35b8490346105325781600319360112610532576020906005548152f35b600435906001600160a01b03821682036110bc57565b600080fd5b6000546001600160a01b031633036110d557565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b60026001541461112a576002600155565b60405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606490fd5b1561117657565b60405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606490fd5b90601f8019910116810190811067ffffffffffffffff8211176111cf57604052565b634e487b7160e01b600052604160045260246000fd5b908160209103126110bc575180151581036110bc5790565b1561120457565b60405162461bcd60e51b815260206004820152600b60248201526a16995c9bc8185b5bdd5b9d60aa1b6044820152606490fd5b1561123e57565b60405162461bcd60e51b815260206004820152600e60248201526d135bdc9c1a1bc81b9bdd081cd95d60921b6044820152606490fd5b9190820180921161128157565b634e487b7160e01b600052601160045260246000fd5b6003546001600160a01b0316801561132b576020600491604051928380926278744560e21b82525afa90811561131f576000916112ee575b50600554808211156112e75781039081116112815790565b5050600090565b906020823d8211611317575b81611307602093836111ad565b810103126107d7575051386112cf565b3d91506112fa565b6040513d6000823e3d90fd5b50600090565b6003546001600160a01b0316801561132b576020600491604051928380926278744560e21b82525afa90811561131f5760009161136c575090565b906020823d8211611392575b81611385602093836111ad565b810103126107d757505190565b3d915061137856fea2646970667358221220a5aa556a2e3e2035ae72b41ad50bfdb367ca9c270aec2c180a287a801383798d64736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 151,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 4289,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "SBT",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IDonationSBT)4253"
      },
      {
        "astId": 4292,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "morphoVault",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IMorphoVault)4279"
      },
      {
        "astId": 4294,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "manager",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 4296,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "totalDonated",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 4298,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "totalDonors",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 4300,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "totalLivesChanged",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4302,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "totalReleased",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4306,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "donorTotal",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4310,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "hasDonated",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 4313,
        "contract": "contracts/DonationVault.sol:DonationVault",
        "label": "donorList",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IDonationSBT)4253": {
        "encoding": "inplace",
        "label": "contract IDonationSBT",
        "numberOfBytes": "20"
      },
      "t_contract(IMorphoVault)4279": {
        "encoding": "inplace",
        "label": "contract IMorphoVault",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}